{"version":3,"sources":["serviceWorker.js","Avatar_list.js","Avatar.js","index.js"],"names":["Boolean","window","location","hostname","match","Avatar_list","props","className","src","name","alt","work","Avatar","state","this","setState","infoArray","id","avatarCardArray","map","avatarcard","i","key","onClick","namechange","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCFSC,G,WAbK,SAACC,GACpB,OACC,yBAAKC,UAAU,6DACd,yBACCC,IAAG,sCAAiCF,EAAMG,MAC1CC,IAAI,iBAEL,4BAAKJ,EAAMG,MACX,2BAAIH,EAAMK,SC0DEC,E,kDA/Dd,aAAe,IAAD,8BACb,gBACKC,MAAQ,CACZJ,KAAM,6CAHM,E,yDAObK,KAAKC,SAAS,CACbN,KACC,0E,+BAGO,IAAD,OACFO,EAAY,CACjB,CACCC,GAAI,EACJR,KAAM,UACNE,KAAM,qBAEP,CACCM,GAAI,EACJR,KAAM,QACNE,KAAM,sBAEP,CACCM,GAAI,EACJR,KAAM,QACNE,KAAM,mBAEP,CACCM,GAAI,EACJR,KAAM,SACNE,KAAM,sBAIFO,EAAkBF,EAAUG,KAAI,SAACC,EAAYC,GAClD,OACC,kBAAC,EAAD,CACCC,IAAKD,EACLJ,GAAID,EAAUK,GAAGJ,GACjBR,KAAMO,EAAUK,GAAGZ,KACnBE,KAAMK,EAAUK,GAAGV,UAItB,OACC,yBAAKJ,UAAU,2BACd,4BAAKO,KAAKD,MAAMJ,KAAhB,KACA,gCAASS,GACT,gCACC,4BACCX,UAAU,kDACVgB,QAAS,kBAAM,EAAKC,eAFrB,6D,GApDgBC,aCArBC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SH0HnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.bc69289d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport \"tachyons\";\r\n\r\nconst Avatar_list = (props) => {\r\n\treturn (\r\n\t\t<div className=\"avatar_style ma4 bg-light-purple dib pa3 tc grow shadow-5\">\r\n\t\t\t<img\r\n\t\t\t\tsrc={`https://joeschmoe.io/api/v1/${props.name}`}\r\n\t\t\t\talt=\"Avatar-Image\"\r\n\t\t\t></img>\r\n\t\t\t<h1>{props.name}</h1>\r\n\t\t\t<p>{props.work}</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Avatar_list;\r\n","import React, { Component } from \"react\";\r\nimport \"./Avatar.css\";\r\nimport Avatar_list from \"./Avatar_list\";\r\nimport \"tachyons\";\r\n\r\nclass Avatar extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tname: \"React App using Tachyons and Google Fonts\",\r\n\t\t};\r\n\t}\r\n\tnamechange() {\r\n\t\tthis.setState({\r\n\t\t\tname:\r\n\t\t\t\t\"React App with state change example and api usage for profile image\",\r\n\t\t});\r\n\t}\r\n\trender() {\r\n\t\tconst infoArray = [\r\n\t\t\t{\r\n\t\t\t\tid: 1,\r\n\t\t\t\tname: \"Abhisan\",\r\n\t\t\t\twork: \"Software Engineer\",\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: 2,\r\n\t\t\t\tname: \"Aston\",\r\n\t\t\t\twork: \"Frontend Developer\",\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: 3,\r\n\t\t\t\tname: \"Angel\",\r\n\t\t\t\twork: \"Database Expert\",\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: 4,\r\n\t\t\t\tname: \"Revert\",\r\n\t\t\t\twork: \"Backend Developer\",\r\n\t\t\t},\r\n\t\t];\r\n\r\n\t\tconst avatarCardArray = infoArray.map((avatarcard, i) => {\r\n\t\t\treturn (\r\n\t\t\t\t<Avatar_list\r\n\t\t\t\t\tkey={i}\r\n\t\t\t\t\tid={infoArray[i].id}\r\n\t\t\t\t\tname={infoArray[i].name}\r\n\t\t\t\t\twork={infoArray[i].work}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t});\r\n\t\treturn (\r\n\t\t\t<div className=\"mainpage justify-center\">\r\n\t\t\t\t<h1>{this.state.name} </h1>\r\n\t\t\t\t<center>{avatarCardArray}</center>\r\n\t\t\t\t<center>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName=\"f6 link dim ba bw0.5 ph3 pv2 mb2 dib black grow\"\r\n\t\t\t\t\t\tonClick={() => this.namechange()}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tOh! I can show you state usage in React, CLICK ME !\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</center>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Avatar;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Avatar from \"./Avatar\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Avatar />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}